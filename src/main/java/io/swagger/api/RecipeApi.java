/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.24).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.RecipeObject;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-03-09T22:27:46.582Z[GMT]")
public interface RecipeApi {

    @Operation(summary = "Get a recipe by ID", description = "## Get a specific recipe using an ID.  **You must have a Recipe API key to use this endpoint.** Get a [Recipe API key](https://chompthis.com/api/recipes/).  **Example** > ```https://chompthis.com/api/v2/recipe/id.php?api_key=API_KEY&id=RECIPE_ID``` ", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "**Valid** - Will return an object containing any matching recipes.  ", content = @Content(schema = @Schema(implementation = RecipeObject.class))),
        
        @ApiResponse(responseCode = "400", description = "**Validation error** - Invalid parameters or request. "),
        
        @ApiResponse(responseCode = "401", description = "**Unauthorized** - Invalid API key, unauthorized access, or usage limits exceeded. ***[More information &raquo;](https://desk.zoho.com/portal/chompthis/kb/articles/what-is-a-rate-limit)*** "),
        
        @ApiResponse(responseCode = "404", description = "**Not found** - No food items were found. "),
        
        @ApiResponse(responseCode = "500", description = "**Server error** - Internal server error, request failed, or base error. *Please **[contact us](https://chompthis.com/api/ticket-new.php)** if you see this.* ") })
    @RequestMapping(value = "/recipe/id.php",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<RecipeObject> recipeIdPhpGet(@NotNull @Parameter(in = ParameterIn.QUERY, description = "#### A recipe ID. Recipe IDs are exposed in the /recipe/search and /recipe/ingredient endpoints.  **Example** > ```&list=tdm_1143_0459d0028fcf8990724785b9e6775037``` " ,required=true,schema=@Schema()) @Valid @RequestParam(value = "id", required = true) String id, @Parameter(in = ParameterIn.QUERY, description = "#### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn't have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** > ```&user_id=fehef8w4ha``` " ,schema=@Schema()) @Valid @RequestParam(value = "user_id", required = false) String userId);


    @Operation(summary = "Get recipes using a list of ingredients", description = "## Get recipes that include all ingredients from a list.  **You must have a Recipe API key to use this endpoint.** Get a [Recipe API key](https://chompthis.com/api/recipes/).  **Example #1** > ```https://chompthis.com/api/v2/recipe/ingredient.php?api_key=API_KEY&list=INGREDIENT```  **Example #2** > ```https://chompthis.com/api/v2/recipe/ingredient.php?api_key=API_KEY&list=INGREDIENT,INGREDIENT,INGREDIENT``` ", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "**Valid** - Will return an object containing any matching recipes.  ", content = @Content(schema = @Schema(implementation = RecipeObject.class))),
        
        @ApiResponse(responseCode = "400", description = "**Validation error** - Invalid parameters or request. "),
        
        @ApiResponse(responseCode = "401", description = "**Unauthorized** - Invalid API key, unauthorized access, or usage limits exceeded. ***[More information &raquo;](https://desk.zoho.com/portal/chompthis/kb/articles/what-is-a-rate-limit)*** "),
        
        @ApiResponse(responseCode = "404", description = "**Not found** - No food items were found. "),
        
        @ApiResponse(responseCode = "500", description = "**Server error** - Internal server error, request failed, or base error. *Please **[contact us](https://chompthis.com/api/ticket-new.php)** if you see this.* ") })
    @RequestMapping(value = "/recipe/ingredient.php",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<RecipeObject> recipeIngredientPhpGet(@NotNull @Parameter(in = ParameterIn.QUERY, description = "#### A single ingredient, or a comma-separated list of up to 3 ingredients. Recipes with each of these ingredients will be returned. **You can pass in up to 3 ingredients at a time.**  **Example** > ```&list=cheese,tomato,milk``` " ,required=true,schema=@Schema()) @Valid @RequestParam(value = "list", required = true) String list, @Parameter(in = ParameterIn.QUERY, description = "#### Set maximum number of records you want the API to return. The default value is \"**3**.\"  **Example** > ```&limit=3``` " ,schema=@Schema(allowableValues={ "1", "2", "3" }
)) @Valid @RequestParam(value = "limit", required = false) Integer limit, @Parameter(in = ParameterIn.QUERY, description = "#### This is how you paginate the search result. By default, you will see the first 3 records. You must increment the page number to access the next 3 records, and so on. The default value is \"**1**.\"  **Example** > ```&page=1``` " ,schema=@Schema()) @Valid @RequestParam(value = "page", required = false) Integer page, @Parameter(in = ParameterIn.QUERY, description = "#### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn't have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** > ```&user_id=fehef8w4ha``` " ,schema=@Schema()) @Valid @RequestParam(value = "user_id", required = false) String userId);


    @Operation(summary = "Get random popular recipes", description = "## Get random recipes that have instructions and nutrients  **You must have a Recipe API key to use this endpoint.** Get a [Recipe API key](https://chompthis.com/api/recipes/).  **Example** > ```https://chompthis.com/api/v2/recipe/random.php?api_key=API_KEY``` ", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "**Valid** - Will return an object containing any matching recipes.  ", content = @Content(schema = @Schema(implementation = RecipeObject.class))),
        
        @ApiResponse(responseCode = "400", description = "**Validation error** - Invalid parameters or request. "),
        
        @ApiResponse(responseCode = "401", description = "**Unauthorized** - Invalid API key, unauthorized access, or usage limits exceeded. ***[More information &raquo;](https://desk.zoho.com/portal/chompthis/kb/articles/what-is-a-rate-limit)*** "),
        
        @ApiResponse(responseCode = "404", description = "**Not found** - No food items were found. "),
        
        @ApiResponse(responseCode = "500", description = "**Server error** - Internal server error, request failed, or base error. *Please **[contact us](https://chompthis.com/api/ticket-new.php)** if you see this.* ") })
    @RequestMapping(value = "/recipe/random.php",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<RecipeObject> recipeRandomPhpGet(@Parameter(in = ParameterIn.QUERY, description = "#### Set maximum number of records you want the API to return. The default value is \"**5**.\"  **Example** > ```&limit=5``` " ,schema=@Schema(allowableValues={ "1", "2", "3", "4", "5" }
)) @Valid @RequestParam(value = "limit", required = false) Integer limit, @Parameter(in = ParameterIn.QUERY, description = "#### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn't have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** > ```&user_id=fehef8w4ha``` " ,schema=@Schema()) @Valid @RequestParam(value = "user_id", required = false) String userId);


    @Operation(summary = "Get recipes using a title and optional filters", description = "## Get recipes using a title and optional filters.  **You must have a Recipe API key to use this endpoint.** Get a [Recipe API key](https://chompthis.com/api/recipes/).  **Example**  > ```https://chompthis.com/api/v2/recipe/search.php?api_key=API_KEY&title=TITLE``` ", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "**Valid** - Will return an object containing any matching recipes.  ", content = @Content(schema = @Schema(implementation = RecipeObject.class))),
        
        @ApiResponse(responseCode = "400", description = "**Validation error** - Invalid parameters or request. "),
        
        @ApiResponse(responseCode = "401", description = "**Unauthorized** - Invalid API key, unauthorized access, or usage limits exceeded. ***[More information &raquo;](https://desk.zoho.com/portal/chompthis/kb/articles/what-is-a-rate-limit)*** "),
        
        @ApiResponse(responseCode = "404", description = "**Not found** - No food items were found. "),
        
        @ApiResponse(responseCode = "500", description = "**Server error** - Internal server error, request failed, or base error. *Please **[contact us](https://chompthis.com/api/ticket-new.php)** if you see this.* ") })
    @RequestMapping(value = "/recipe/search.php",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<RecipeObject> recipeSearchPhpGet(@NotNull @Parameter(in = ParameterIn.QUERY, description = "#### A recipe title  **Example** > ```&title=Banana Bread``` " ,required=true,schema=@Schema()) @Valid @RequestParam(value = "title", required = true) String title, @Parameter(in = ParameterIn.QUERY, description = "#### A specific cuisine you want excluded from results  **Example** > ```&excluded_cuisine=Italian``` " ,schema=@Schema()) @Valid @RequestParam(value = "excluded_cuisine", required = false) String excludedCuisine, @Parameter(in = ParameterIn.QUERY, description = "#### A specific cuisine you want included in results  **Example** > ```&included_cuisine=Chinese``` " ,schema=@Schema()) @Valid @RequestParam(value = "included_cuisine", required = false) String includedCuisine, @Parameter(in = ParameterIn.QUERY, description = "#### Recipes with this ingredient will be excluded from results  **Example** > ```&excluded_ingredient=egg``` " ,schema=@Schema()) @Valid @RequestParam(value = "excluded_ingredient", required = false) String excludedIngredient, @Parameter(in = ParameterIn.QUERY, description = "#### Only recipes with this ingredient will be returned  **Example** > ```&included_ingredient=apple``` " ,schema=@Schema()) @Valid @RequestParam(value = "included_ingredient", required = false) String includedIngredient, @Parameter(in = ParameterIn.QUERY, description = "#### Optionally require all recipes to include nutrition info. Recipes with, or without, nutrition info are returned by default.  **Example** > ```&nutrients_required=1``` " ,schema=@Schema(allowableValues={ "1", "0" }
)) @Valid @RequestParam(value = "nutrients_required", required = false) Integer nutrientsRequired, @Parameter(in = ParameterIn.QUERY, description = "#### Set maximum number of records you want the API to return. The default value is \"**5**.\"  **Example** > ```&limit=3``` " ,schema=@Schema(allowableValues={ "1", "2", "3", "4", "5" }
)) @Valid @RequestParam(value = "limit", required = false) Integer limit, @Parameter(in = ParameterIn.QUERY, description = "#### This is how you paginate the search result. By default, you will see the first 5 records. You must increment the page number to access the next 5 records, and so on. The default value is \"**1**.\"  **Example** > ```&page=1``` " ,schema=@Schema()) @Valid @RequestParam(value = "page", required = false) Integer page, @Parameter(in = ParameterIn.QUERY, description = "#### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn't have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** > ```&user_id=fehef8w4ha``` " ,schema=@Schema()) @Valid @RequestParam(value = "user_id", required = false) String userId);

}

