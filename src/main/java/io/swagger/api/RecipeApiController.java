package io.swagger.api;

import io.swagger.model.RecipeObject;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.constraints.*;
import javax.validation.Valid;
import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-03-09T22:27:46.582Z[GMT]")
@RestController
public class RecipeApiController implements RecipeApi {

    private static final Logger log = LoggerFactory.getLogger(RecipeApiController.class);

    private final ObjectMapper objectMapper;

    private final HttpServletRequest request;

    @org.springframework.beans.factory.annotation.Autowired
    public RecipeApiController(ObjectMapper objectMapper, HttpServletRequest request) {
        this.objectMapper = objectMapper;
        this.request = request;
    }

    public ResponseEntity<RecipeObject> recipeIdPhpGet(@NotNull @Parameter(in = ParameterIn.QUERY, description = "#### A recipe ID. Recipe IDs are exposed in the /recipe/search and /recipe/ingredient endpoints.  **Example** > ```&list=tdm_1143_0459d0028fcf8990724785b9e6775037``` " ,required=true,schema=@Schema()) @Valid @RequestParam(value = "id", required = true) String id,@Parameter(in = ParameterIn.QUERY, description = "#### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn't have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** > ```&user_id=fehef8w4ha``` " ,schema=@Schema()) @Valid @RequestParam(value = "user_id", required = false) String userId) {
        String accept = request.getHeader("Accept");
        if (accept != null && accept.contains("application/json")) {
            try {
                return new ResponseEntity<RecipeObject>(objectMapper.readValue("{\n  \"items\" : [ {\n    \"base_ingredients\" : [ \"base_ingredients\", \"base_ingredients\" ],\n    \"diabetic_exchanges\" : [ \"diabetic_exchanges\", \"diabetic_exchanges\" ],\n    \"keywords\" : [ \"keywords\", \"keywords\" ],\n    \"meta\" : {\n      \"images\" : {\n        \"standard\" : \"standard\",\n        \"small\" : \"small\",\n        \"thumbnail\" : \"thumbnail\",\n        \"extra_large\" : \"extra_large\",\n        \"large\" : \"large\",\n        \"extra_small\" : \"extra_small\",\n        \"grid_view\" : \"grid_view\"\n      },\n      \"created\" : \"created\",\n      \"cuisine\" : \"cuisine\",\n      \"modified\" : \"modified\",\n      \"source\" : \"source\",\n      \"url\" : \"url\",\n      \"nutrients_notice\" : \"nutrients_notice\"\n    },\n    \"author\" : \"author\",\n    \"topics\" : [ \"topics\", \"topics\" ],\n    \"ingredients\" : [ {\n      \"quantity\" : \"quantity\",\n      \"description\" : \"description\"\n    }, {\n      \"quantity\" : \"quantity\",\n      \"description\" : \"description\"\n    } ],\n    \"attributes\" : {\n      \"servings\" : \"servings\",\n      \"prep_time\" : \"prep_time\",\n      \"serving_size\" : \"serving_size\",\n      \"total_time\" : \"total_time\"\n    },\n    \"id\" : \"id\",\n    \"categories\" : [ \"categories\", \"categories\" ],\n    \"title\" : \"title\",\n    \"nutrients\" : {\n      \"vitamins\" : [ null, null ],\n      \"carbs\" : [ null, null ],\n      \"daily_values\" : [ null, null ],\n      \"fat\" : [ null, null ],\n      \"calories\" : [ {\n        \"title\" : \"title\",\n        \"value\" : \"value\",\n        \"percent\" : \"percent\"\n      }, {\n        \"title\" : \"title\",\n        \"value\" : \"value\",\n        \"percent\" : \"percent\"\n      } ]\n    }\n  }, {\n    \"base_ingredients\" : [ \"base_ingredients\", \"base_ingredients\" ],\n    \"diabetic_exchanges\" : [ \"diabetic_exchanges\", \"diabetic_exchanges\" ],\n    \"keywords\" : [ \"keywords\", \"keywords\" ],\n    \"meta\" : {\n      \"images\" : {\n        \"standard\" : \"standard\",\n        \"small\" : \"small\",\n        \"thumbnail\" : \"thumbnail\",\n        \"extra_large\" : \"extra_large\",\n        \"large\" : \"large\",\n        \"extra_small\" : \"extra_small\",\n        \"grid_view\" : \"grid_view\"\n      },\n      \"created\" : \"created\",\n      \"cuisine\" : \"cuisine\",\n      \"modified\" : \"modified\",\n      \"source\" : \"source\",\n      \"url\" : \"url\",\n      \"nutrients_notice\" : \"nutrients_notice\"\n    },\n    \"author\" : \"author\",\n    \"topics\" : [ \"topics\", \"topics\" ],\n    \"ingredients\" : [ {\n      \"quantity\" : \"quantity\",\n      \"description\" : \"description\"\n    }, {\n      \"quantity\" : \"quantity\",\n      \"description\" : \"description\"\n    } ],\n    \"attributes\" : {\n      \"servings\" : \"servings\",\n      \"prep_time\" : \"prep_time\",\n      \"serving_size\" : \"serving_size\",\n      \"total_time\" : \"total_time\"\n    },\n    \"id\" : \"id\",\n    \"categories\" : [ \"categories\", \"categories\" ],\n    \"title\" : \"title\",\n    \"nutrients\" : {\n      \"vitamins\" : [ null, null ],\n      \"carbs\" : [ null, null ],\n      \"daily_values\" : [ null, null ],\n      \"fat\" : [ null, null ],\n      \"calories\" : [ {\n        \"title\" : \"title\",\n        \"value\" : \"value\",\n        \"percent\" : \"percent\"\n      }, {\n        \"title\" : \"title\",\n        \"value\" : \"value\",\n        \"percent\" : \"percent\"\n      } ]\n    }\n  } ]\n}", RecipeObject.class), HttpStatus.NOT_IMPLEMENTED);
            } catch (IOException e) {
                log.error("Couldn't serialize response for content type application/json", e);
                return new ResponseEntity<RecipeObject>(HttpStatus.INTERNAL_SERVER_ERROR);
            }
        }

        return new ResponseEntity<RecipeObject>(HttpStatus.NOT_IMPLEMENTED);
    }

    public ResponseEntity<RecipeObject> recipeIngredientPhpGet(@NotNull @Parameter(in = ParameterIn.QUERY, description = "#### A single ingredient, or a comma-separated list of up to 3 ingredients. Recipes with each of these ingredients will be returned. **You can pass in up to 3 ingredients at a time.**  **Example** > ```&list=cheese,tomato,milk``` " ,required=true,schema=@Schema()) @Valid @RequestParam(value = "list", required = true) String list,@Parameter(in = ParameterIn.QUERY, description = "#### Set maximum number of records you want the API to return. The default value is \"**3**.\"  **Example** > ```&limit=3``` " ,schema=@Schema(allowableValues={ "1", "2", "3" }
)) @Valid @RequestParam(value = "limit", required = false) Integer limit,@Parameter(in = ParameterIn.QUERY, description = "#### This is how you paginate the search result. By default, you will see the first 3 records. You must increment the page number to access the next 3 records, and so on. The default value is \"**1**.\"  **Example** > ```&page=1``` " ,schema=@Schema()) @Valid @RequestParam(value = "page", required = false) Integer page,@Parameter(in = ParameterIn.QUERY, description = "#### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn't have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** > ```&user_id=fehef8w4ha``` " ,schema=@Schema()) @Valid @RequestParam(value = "user_id", required = false) String userId) {
        String accept = request.getHeader("Accept");
        if (accept != null && accept.contains("application/json")) {
            try {
                return new ResponseEntity<RecipeObject>(objectMapper.readValue("{\n  \"items\" : [ {\n    \"base_ingredients\" : [ \"base_ingredients\", \"base_ingredients\" ],\n    \"diabetic_exchanges\" : [ \"diabetic_exchanges\", \"diabetic_exchanges\" ],\n    \"keywords\" : [ \"keywords\", \"keywords\" ],\n    \"meta\" : {\n      \"images\" : {\n        \"standard\" : \"standard\",\n        \"small\" : \"small\",\n        \"thumbnail\" : \"thumbnail\",\n        \"extra_large\" : \"extra_large\",\n        \"large\" : \"large\",\n        \"extra_small\" : \"extra_small\",\n        \"grid_view\" : \"grid_view\"\n      },\n      \"created\" : \"created\",\n      \"cuisine\" : \"cuisine\",\n      \"modified\" : \"modified\",\n      \"source\" : \"source\",\n      \"url\" : \"url\",\n      \"nutrients_notice\" : \"nutrients_notice\"\n    },\n    \"author\" : \"author\",\n    \"topics\" : [ \"topics\", \"topics\" ],\n    \"ingredients\" : [ {\n      \"quantity\" : \"quantity\",\n      \"description\" : \"description\"\n    }, {\n      \"quantity\" : \"quantity\",\n      \"description\" : \"description\"\n    } ],\n    \"attributes\" : {\n      \"servings\" : \"servings\",\n      \"prep_time\" : \"prep_time\",\n      \"serving_size\" : \"serving_size\",\n      \"total_time\" : \"total_time\"\n    },\n    \"id\" : \"id\",\n    \"categories\" : [ \"categories\", \"categories\" ],\n    \"title\" : \"title\",\n    \"nutrients\" : {\n      \"vitamins\" : [ null, null ],\n      \"carbs\" : [ null, null ],\n      \"daily_values\" : [ null, null ],\n      \"fat\" : [ null, null ],\n      \"calories\" : [ {\n        \"title\" : \"title\",\n        \"value\" : \"value\",\n        \"percent\" : \"percent\"\n      }, {\n        \"title\" : \"title\",\n        \"value\" : \"value\",\n        \"percent\" : \"percent\"\n      } ]\n    }\n  }, {\n    \"base_ingredients\" : [ \"base_ingredients\", \"base_ingredients\" ],\n    \"diabetic_exchanges\" : [ \"diabetic_exchanges\", \"diabetic_exchanges\" ],\n    \"keywords\" : [ \"keywords\", \"keywords\" ],\n    \"meta\" : {\n      \"images\" : {\n        \"standard\" : \"standard\",\n        \"small\" : \"small\",\n        \"thumbnail\" : \"thumbnail\",\n        \"extra_large\" : \"extra_large\",\n        \"large\" : \"large\",\n        \"extra_small\" : \"extra_small\",\n        \"grid_view\" : \"grid_view\"\n      },\n      \"created\" : \"created\",\n      \"cuisine\" : \"cuisine\",\n      \"modified\" : \"modified\",\n      \"source\" : \"source\",\n      \"url\" : \"url\",\n      \"nutrients_notice\" : \"nutrients_notice\"\n    },\n    \"author\" : \"author\",\n    \"topics\" : [ \"topics\", \"topics\" ],\n    \"ingredients\" : [ {\n      \"quantity\" : \"quantity\",\n      \"description\" : \"description\"\n    }, {\n      \"quantity\" : \"quantity\",\n      \"description\" : \"description\"\n    } ],\n    \"attributes\" : {\n      \"servings\" : \"servings\",\n      \"prep_time\" : \"prep_time\",\n      \"serving_size\" : \"serving_size\",\n      \"total_time\" : \"total_time\"\n    },\n    \"id\" : \"id\",\n    \"categories\" : [ \"categories\", \"categories\" ],\n    \"title\" : \"title\",\n    \"nutrients\" : {\n      \"vitamins\" : [ null, null ],\n      \"carbs\" : [ null, null ],\n      \"daily_values\" : [ null, null ],\n      \"fat\" : [ null, null ],\n      \"calories\" : [ {\n        \"title\" : \"title\",\n        \"value\" : \"value\",\n        \"percent\" : \"percent\"\n      }, {\n        \"title\" : \"title\",\n        \"value\" : \"value\",\n        \"percent\" : \"percent\"\n      } ]\n    }\n  } ]\n}", RecipeObject.class), HttpStatus.NOT_IMPLEMENTED);
            } catch (IOException e) {
                log.error("Couldn't serialize response for content type application/json", e);
                return new ResponseEntity<RecipeObject>(HttpStatus.INTERNAL_SERVER_ERROR);
            }
        }

        return new ResponseEntity<RecipeObject>(HttpStatus.NOT_IMPLEMENTED);
    }

    public ResponseEntity<RecipeObject> recipeRandomPhpGet(@Parameter(in = ParameterIn.QUERY, description = "#### Set maximum number of records you want the API to return. The default value is \"**5**.\"  **Example** > ```&limit=5``` " ,schema=@Schema(allowableValues={ "1", "2", "3", "4", "5" }
)) @Valid @RequestParam(value = "limit", required = false) Integer limit,@Parameter(in = ParameterIn.QUERY, description = "#### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn't have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** > ```&user_id=fehef8w4ha``` " ,schema=@Schema()) @Valid @RequestParam(value = "user_id", required = false) String userId) {
        String accept = request.getHeader("Accept");
        if (accept != null && accept.contains("application/json")) {
            try {
                return new ResponseEntity<RecipeObject>(objectMapper.readValue("{\n  \"items\" : [ {\n    \"base_ingredients\" : [ \"base_ingredients\", \"base_ingredients\" ],\n    \"diabetic_exchanges\" : [ \"diabetic_exchanges\", \"diabetic_exchanges\" ],\n    \"keywords\" : [ \"keywords\", \"keywords\" ],\n    \"meta\" : {\n      \"images\" : {\n        \"standard\" : \"standard\",\n        \"small\" : \"small\",\n        \"thumbnail\" : \"thumbnail\",\n        \"extra_large\" : \"extra_large\",\n        \"large\" : \"large\",\n        \"extra_small\" : \"extra_small\",\n        \"grid_view\" : \"grid_view\"\n      },\n      \"created\" : \"created\",\n      \"cuisine\" : \"cuisine\",\n      \"modified\" : \"modified\",\n      \"source\" : \"source\",\n      \"url\" : \"url\",\n      \"nutrients_notice\" : \"nutrients_notice\"\n    },\n    \"author\" : \"author\",\n    \"topics\" : [ \"topics\", \"topics\" ],\n    \"ingredients\" : [ {\n      \"quantity\" : \"quantity\",\n      \"description\" : \"description\"\n    }, {\n      \"quantity\" : \"quantity\",\n      \"description\" : \"description\"\n    } ],\n    \"attributes\" : {\n      \"servings\" : \"servings\",\n      \"prep_time\" : \"prep_time\",\n      \"serving_size\" : \"serving_size\",\n      \"total_time\" : \"total_time\"\n    },\n    \"id\" : \"id\",\n    \"categories\" : [ \"categories\", \"categories\" ],\n    \"title\" : \"title\",\n    \"nutrients\" : {\n      \"vitamins\" : [ null, null ],\n      \"carbs\" : [ null, null ],\n      \"daily_values\" : [ null, null ],\n      \"fat\" : [ null, null ],\n      \"calories\" : [ {\n        \"title\" : \"title\",\n        \"value\" : \"value\",\n        \"percent\" : \"percent\"\n      }, {\n        \"title\" : \"title\",\n        \"value\" : \"value\",\n        \"percent\" : \"percent\"\n      } ]\n    }\n  }, {\n    \"base_ingredients\" : [ \"base_ingredients\", \"base_ingredients\" ],\n    \"diabetic_exchanges\" : [ \"diabetic_exchanges\", \"diabetic_exchanges\" ],\n    \"keywords\" : [ \"keywords\", \"keywords\" ],\n    \"meta\" : {\n      \"images\" : {\n        \"standard\" : \"standard\",\n        \"small\" : \"small\",\n        \"thumbnail\" : \"thumbnail\",\n        \"extra_large\" : \"extra_large\",\n        \"large\" : \"large\",\n        \"extra_small\" : \"extra_small\",\n        \"grid_view\" : \"grid_view\"\n      },\n      \"created\" : \"created\",\n      \"cuisine\" : \"cuisine\",\n      \"modified\" : \"modified\",\n      \"source\" : \"source\",\n      \"url\" : \"url\",\n      \"nutrients_notice\" : \"nutrients_notice\"\n    },\n    \"author\" : \"author\",\n    \"topics\" : [ \"topics\", \"topics\" ],\n    \"ingredients\" : [ {\n      \"quantity\" : \"quantity\",\n      \"description\" : \"description\"\n    }, {\n      \"quantity\" : \"quantity\",\n      \"description\" : \"description\"\n    } ],\n    \"attributes\" : {\n      \"servings\" : \"servings\",\n      \"prep_time\" : \"prep_time\",\n      \"serving_size\" : \"serving_size\",\n      \"total_time\" : \"total_time\"\n    },\n    \"id\" : \"id\",\n    \"categories\" : [ \"categories\", \"categories\" ],\n    \"title\" : \"title\",\n    \"nutrients\" : {\n      \"vitamins\" : [ null, null ],\n      \"carbs\" : [ null, null ],\n      \"daily_values\" : [ null, null ],\n      \"fat\" : [ null, null ],\n      \"calories\" : [ {\n        \"title\" : \"title\",\n        \"value\" : \"value\",\n        \"percent\" : \"percent\"\n      }, {\n        \"title\" : \"title\",\n        \"value\" : \"value\",\n        \"percent\" : \"percent\"\n      } ]\n    }\n  } ]\n}", RecipeObject.class), HttpStatus.NOT_IMPLEMENTED);
            } catch (IOException e) {
                log.error("Couldn't serialize response for content type application/json", e);
                return new ResponseEntity<RecipeObject>(HttpStatus.INTERNAL_SERVER_ERROR);
            }
        }

        return new ResponseEntity<RecipeObject>(HttpStatus.NOT_IMPLEMENTED);
    }

    public ResponseEntity<RecipeObject> recipeSearchPhpGet(@NotNull @Parameter(in = ParameterIn.QUERY, description = "#### A recipe title  **Example** > ```&title=Banana Bread``` " ,required=true,schema=@Schema()) @Valid @RequestParam(value = "title", required = true) String title,@Parameter(in = ParameterIn.QUERY, description = "#### A specific cuisine you want excluded from results  **Example** > ```&excluded_cuisine=Italian``` " ,schema=@Schema()) @Valid @RequestParam(value = "excluded_cuisine", required = false) String excludedCuisine,@Parameter(in = ParameterIn.QUERY, description = "#### A specific cuisine you want included in results  **Example** > ```&included_cuisine=Chinese``` " ,schema=@Schema()) @Valid @RequestParam(value = "included_cuisine", required = false) String includedCuisine,@Parameter(in = ParameterIn.QUERY, description = "#### Recipes with this ingredient will be excluded from results  **Example** > ```&excluded_ingredient=egg``` " ,schema=@Schema()) @Valid @RequestParam(value = "excluded_ingredient", required = false) String excludedIngredient,@Parameter(in = ParameterIn.QUERY, description = "#### Only recipes with this ingredient will be returned  **Example** > ```&included_ingredient=apple``` " ,schema=@Schema()) @Valid @RequestParam(value = "included_ingredient", required = false) String includedIngredient,@Parameter(in = ParameterIn.QUERY, description = "#### Optionally require all recipes to include nutrition info. Recipes with, or without, nutrition info are returned by default.  **Example** > ```&nutrients_required=1``` " ,schema=@Schema(allowableValues={ "1", "0" }
)) @Valid @RequestParam(value = "nutrients_required", required = false) Integer nutrientsRequired,@Parameter(in = ParameterIn.QUERY, description = "#### Set maximum number of records you want the API to return. The default value is \"**5**.\"  **Example** > ```&limit=3``` " ,schema=@Schema(allowableValues={ "1", "2", "3", "4", "5" }
)) @Valid @RequestParam(value = "limit", required = false) Integer limit,@Parameter(in = ParameterIn.QUERY, description = "#### This is how you paginate the search result. By default, you will see the first 5 records. You must increment the page number to access the next 5 records, and so on. The default value is \"**1**.\"  **Example** > ```&page=1``` " ,schema=@Schema()) @Valid @RequestParam(value = "page", required = false) Integer page,@Parameter(in = ParameterIn.QUERY, description = "#### **Only required for Premium subscribers.** The unique identifier assigned to each user on your platform. This can be any string of letters or numbers and doesn't have to relate to your own database. [Learn more](https://desk.zoho.com/portal/chompthis/en/kb/articles/monthly-active-users)  **Example** > ```&user_id=fehef8w4ha``` " ,schema=@Schema()) @Valid @RequestParam(value = "user_id", required = false) String userId) {
        String accept = request.getHeader("Accept");
        if (accept != null && accept.contains("application/json")) {
            try {
                return new ResponseEntity<RecipeObject>(objectMapper.readValue("{\n  \"items\" : [ {\n    \"base_ingredients\" : [ \"base_ingredients\", \"base_ingredients\" ],\n    \"diabetic_exchanges\" : [ \"diabetic_exchanges\", \"diabetic_exchanges\" ],\n    \"keywords\" : [ \"keywords\", \"keywords\" ],\n    \"meta\" : {\n      \"images\" : {\n        \"standard\" : \"standard\",\n        \"small\" : \"small\",\n        \"thumbnail\" : \"thumbnail\",\n        \"extra_large\" : \"extra_large\",\n        \"large\" : \"large\",\n        \"extra_small\" : \"extra_small\",\n        \"grid_view\" : \"grid_view\"\n      },\n      \"created\" : \"created\",\n      \"cuisine\" : \"cuisine\",\n      \"modified\" : \"modified\",\n      \"source\" : \"source\",\n      \"url\" : \"url\",\n      \"nutrients_notice\" : \"nutrients_notice\"\n    },\n    \"author\" : \"author\",\n    \"topics\" : [ \"topics\", \"topics\" ],\n    \"ingredients\" : [ {\n      \"quantity\" : \"quantity\",\n      \"description\" : \"description\"\n    }, {\n      \"quantity\" : \"quantity\",\n      \"description\" : \"description\"\n    } ],\n    \"attributes\" : {\n      \"servings\" : \"servings\",\n      \"prep_time\" : \"prep_time\",\n      \"serving_size\" : \"serving_size\",\n      \"total_time\" : \"total_time\"\n    },\n    \"id\" : \"id\",\n    \"categories\" : [ \"categories\", \"categories\" ],\n    \"title\" : \"title\",\n    \"nutrients\" : {\n      \"vitamins\" : [ null, null ],\n      \"carbs\" : [ null, null ],\n      \"daily_values\" : [ null, null ],\n      \"fat\" : [ null, null ],\n      \"calories\" : [ {\n        \"title\" : \"title\",\n        \"value\" : \"value\",\n        \"percent\" : \"percent\"\n      }, {\n        \"title\" : \"title\",\n        \"value\" : \"value\",\n        \"percent\" : \"percent\"\n      } ]\n    }\n  }, {\n    \"base_ingredients\" : [ \"base_ingredients\", \"base_ingredients\" ],\n    \"diabetic_exchanges\" : [ \"diabetic_exchanges\", \"diabetic_exchanges\" ],\n    \"keywords\" : [ \"keywords\", \"keywords\" ],\n    \"meta\" : {\n      \"images\" : {\n        \"standard\" : \"standard\",\n        \"small\" : \"small\",\n        \"thumbnail\" : \"thumbnail\",\n        \"extra_large\" : \"extra_large\",\n        \"large\" : \"large\",\n        \"extra_small\" : \"extra_small\",\n        \"grid_view\" : \"grid_view\"\n      },\n      \"created\" : \"created\",\n      \"cuisine\" : \"cuisine\",\n      \"modified\" : \"modified\",\n      \"source\" : \"source\",\n      \"url\" : \"url\",\n      \"nutrients_notice\" : \"nutrients_notice\"\n    },\n    \"author\" : \"author\",\n    \"topics\" : [ \"topics\", \"topics\" ],\n    \"ingredients\" : [ {\n      \"quantity\" : \"quantity\",\n      \"description\" : \"description\"\n    }, {\n      \"quantity\" : \"quantity\",\n      \"description\" : \"description\"\n    } ],\n    \"attributes\" : {\n      \"servings\" : \"servings\",\n      \"prep_time\" : \"prep_time\",\n      \"serving_size\" : \"serving_size\",\n      \"total_time\" : \"total_time\"\n    },\n    \"id\" : \"id\",\n    \"categories\" : [ \"categories\", \"categories\" ],\n    \"title\" : \"title\",\n    \"nutrients\" : {\n      \"vitamins\" : [ null, null ],\n      \"carbs\" : [ null, null ],\n      \"daily_values\" : [ null, null ],\n      \"fat\" : [ null, null ],\n      \"calories\" : [ {\n        \"title\" : \"title\",\n        \"value\" : \"value\",\n        \"percent\" : \"percent\"\n      }, {\n        \"title\" : \"title\",\n        \"value\" : \"value\",\n        \"percent\" : \"percent\"\n      } ]\n    }\n  } ]\n}", RecipeObject.class), HttpStatus.NOT_IMPLEMENTED);
            } catch (IOException e) {
                log.error("Couldn't serialize response for content type application/json", e);
                return new ResponseEntity<RecipeObject>(HttpStatus.INTERNAL_SERVER_ERROR);
            }
        }

        return new ResponseEntity<RecipeObject>(HttpStatus.NOT_IMPLEMENTED);
    }

}
